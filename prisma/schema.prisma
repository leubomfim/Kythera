// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime?
  name          String?
  image         String?
  
  // Campos para autenticação normal (não OAuth)
  password      String?   // Hash da senha para login normal
  
  // Campos para OTP/2FA (opcionais)
  otpSecret     String?   // Secret para TOTP (Google Authenticator)
  otpEnabled    Boolean   @default(false)
  backupCodes   String[]  // Códigos de backup para 2FA
  
  // Campos para recuperação de senha
  resetToken    String?   // Token para reset de senha
  resetTokenExpiry DateTime? // Expiração do token
  
  // Tentativas de login (segurança)
  loginAttempts Int       @default(0)
  lockedUntil   DateTime? // Bloqueio temporário por tentativas
  
  // Campos de perfil do usuário
  firstName     String?
  lastName      String?
  phone         String?
  birthDate     DateTime?
  
  // Preferências do usuário
  theme         Theme     @default(LIGHT)
  language      Language  @default(PT_BR)
  
  // Sistema de créditos
  credits       Decimal   @default(0.00) @db.Decimal(10, 2)
  
  // Campos de controle
  isActive      Boolean   @default(true)
  isVerified    Boolean   @default(false)
  role          UserRole  @default(USER)
  
  // Timestamps
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastLoginAt   DateTime?
  
  // Relacionamentos
  accounts      Account[]
  sessions      Session[]
  orders        Order[]
  cartItems     CartItem[]
  reviews       Review[]
  creditTransactions CreditTransaction[]
  supportChats  SupportChat[]
  
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// ============================================================================
// CÁLCULO DE FRETE (apenas CEP)
// ============================================================================

model ShippingCalculation {
  id          String   @id @default(cuid())
  zipCode     String   // CEP para cálculo
  city        String?  // Cidade (obtida via API do CEP)
  state       String?  // Estado (obtido via API do CEP)
  
  // Dados do frete calculado
  shippingCost Decimal @db.Decimal(10, 2)
  deliveryDays Int     // Prazo de entrega em dias
  
  // Timestamps
  createdAt   DateTime @default(now())
  
  @@map("shipping_calculations")
}

// ============================================================================
// PRODUTOS
// ============================================================================

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  image       String?
  
  // Hierarquia de categorias
  parentId    String?
  parent      Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  
  // Controles
  isActive    Boolean   @default(true)
  sortOrder   Int       @default(0)
  
  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relacionamentos
  products    Product[]
  
  @@map("categories")
}

model Product {
  id            String   @id @default(cuid())
  name          String
  slug          String   @unique
  description   String?
  shortDescription String?
  
  // Preços e estoque
  price         Decimal  @db.Decimal(10, 2)
  comparePrice  Decimal? @db.Decimal(10, 2) // Preço "de" para mostrar desconto
  cost          Decimal? @db.Decimal(10, 2) // Custo do produto
  
  // Estoque
  stock         Int      @default(0)
  minStock      Int      @default(0)
  maxStock      Int?
  trackStock    Boolean  @default(true)
  
  // Dimensões e peso (para cálculo de frete)
  weight        Decimal? @db.Decimal(8, 3) // em kg
  length        Decimal? @db.Decimal(8, 2) // em cm
  width         Decimal? @db.Decimal(8, 2) // em cm
  height        Decimal? @db.Decimal(8, 2) // em cm
  
  // SEO e metadados
  metaTitle     String?
  metaDescription String?
  
  // Controles
  isActive      Boolean  @default(true)
  isFeatured    Boolean  @default(false)
  isDigital     Boolean  @default(false) // Produto digital não precisa de frete
  
  // Timestamps
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relacionamentos
  categoryId    String
  category      Category @relation(fields: [categoryId], references: [id])
  images        ProductImage[]
  cartItems     CartItem[]
  orderItems    OrderItem[]
  reviews       Review[]
  
  @@map("products")
}

model ProductImage {
  id        String  @id @default(cuid())
  productId String
  url       String
  alt       String?
  sortOrder Int     @default(0)
  
  // Timestamps
  createdAt DateTime @default(now())
  
  // Relacionamentos
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@map("product_images")
}

// ============================================================================
// CARRINHO DE COMPRAS
// ============================================================================

model CartItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  quantity  Int      @default(1)
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relacionamentos
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@unique([userId, productId])
  @@map("cart_items")
}

// ============================================================================
// PEDIDOS E COMPRAS
// ============================================================================

model Order {
  id            String      @id @default(cuid())
  userId        String
  orderNumber   String      @unique // Número do pedido para o cliente
  
  // Status do pedido
  status        OrderStatus @default(PENDING)
  
  // Valores
  subtotal      Decimal     @db.Decimal(10, 2)
  shippingCost  Decimal     @db.Decimal(10, 2) @default(0.00)
  discount      Decimal     @db.Decimal(10, 2) @default(0.00)
  total         Decimal     @db.Decimal(10, 2)
  creditsUsed   Decimal     @db.Decimal(10, 2) @default(0.00)
  
  // Endereço de entrega (FICTÍCIO - apenas para demonstração)
  // AVISO: Usuário deve inserir endereço fictício
  shippingZipCode String?
  shippingCity    String?
  shippingState   String?
  shippingStreet  String?  // Endereço fictício fornecido pelo usuário
  shippingNumber  String?  // Número fictício
  
  // Dados de entrega calculados
  deliveryDays    Int?
  
  // Rastreamento
  trackingCode  String?
  
  // Timestamps
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  shippedAt     DateTime?
  deliveredAt   DateTime?
  
  // Relacionamentos
  user          User        @relation(fields: [userId], references: [id])
  items         OrderItem[]
  
  @@map("orders")
}

model OrderItem {
  id          String  @id @default(cuid())
  orderId     String
  productId   String
  quantity    Int
  
  // Snapshot dos dados do produto no momento da compra
  productName String
  productPrice Decimal @db.Decimal(10, 2)
  productImage String?
  
  // Timestamps
  createdAt   DateTime @default(now())
  
  // Relacionamentos
  order       Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product     Product @relation(fields: [productId], references: [id])
  
  @@map("order_items")
}

// ============================================================================
// SISTEMA DE CRÉDITOS
// ============================================================================

model CreditTransaction {
  id          String            @id @default(cuid())
  userId      String
  type        CreditTransactionType
  amount      Decimal           @db.Decimal(10, 2)
  description String
  
  // Referências opcionais
  orderId     String?           // Se foi usado em uma compra
  
  // Timestamps
  createdAt   DateTime          @default(now())
  
  // Relacionamentos
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("credit_transactions")
}

// ============================================================================
// SISTEMA DE AVALIAÇÕES
// ============================================================================

model Review {
  id        String   @id @default(cuid())
  userId    String
  productId String
  
  // Avaliação
  rating    Int      // 1 a 5 estrelas
  title     String?
  comment   String?
  
  // Controles
  isApproved Boolean @default(false) // Moderação de reviews
  isActive   Boolean @default(true)
  
  // Timestamps
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  // Relacionamentos
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@unique([userId, productId]) // Um usuário só pode avaliar um produto uma vez
  @@map("reviews")
}

// ============================================================================
// SISTEMA DE CHAT/SUPORTE
// ============================================================================

model SupportChat {
  id          String            @id @default(cuid())
  userId      String
  subject     String
  status      SupportChatStatus @default(OPEN)
  
  // Timestamps
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  closedAt    DateTime?
  
  // Relacionamentos
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages    SupportMessage[]
  
  @@map("support_chats")
}

model SupportMessage {
  id        String      @id @default(cuid())
  chatId    String
  content   String
  isFromUser Boolean    @default(true) // true = usuário, false = "funcionário"
  
  // Timestamps
  createdAt DateTime    @default(now())
  
  // Relacionamentos
  chat      SupportChat @relation(fields: [chatId], references: [id], onDelete: Cascade)
  
  @@map("support_messages")
}

// ============================================================================
// ENUMS
// ============================================================================

enum UserRole {
  USER
  ADMIN
  MODERATOR
}

enum Theme {
  LIGHT
  DARK
}

enum Language {
  PT_BR
  EN_US
}

enum OrderStatus {
  PENDING       // Aguardando processamento
  CONFIRMED     // Confirmado
  PROCESSING    // Em processamento
  SHIPPED       // Enviado
  DELIVERED     // Entregue
  CANCELLED     // Cancelado
  REFUNDED      // Reembolsado
}

enum CreditTransactionType {
  PURCHASE      // Compra de créditos
  USAGE         // Uso de créditos em compra
  REFUND        // Reembolso
  BONUS         // Bônus/promoção
  ADMIN_ADJUST  // Ajuste administrativo
}

enum SupportChatStatus {
  OPEN
  IN_PROGRESS
  WAITING_USER
  CLOSED
}
